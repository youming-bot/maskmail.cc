name: Deploy Next.js App to Cloudflare

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "8"

jobs:
  # Deploy preview for pull requests
  deploy-preview:
    name: Deploy Preview
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment: preview
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Cache OpenNext build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            .open-next
            node_modules/.cache
          key: ${{ runner.os }}-opennext-${{ hashFiles('pnpm-lock.yaml') }}-${{ hashFiles('**/*.[jt]s', '**/*.[jt]sx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-opennext-${{ hashFiles('pnpm-lock.yaml') }}-
            ${{ runner.os }}-opennext-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Generate Cloudflare types
        run: pnpm run cf-typegen

      - name: Build application
        run: pnpm run preview:cf
        env:
          BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

      - name: Verify build output
        run: |
          echo "Checking build output..."
          ls -la .open-next/ || echo "No .open-next directory found"
          ls -la .next/ || echo "No .next directory found"
          echo "Build verification complete"

      - name: Run database migrations (Preview)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          environment: preview
          command: d1 migrations apply maskmail-db --env preview

      - name: Deploy to Preview
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          environment: preview
          secrets: |
            BETTER_AUTH_SECRET
            GOOGLE_CLIENT_ID
            GOOGLE_CLIENT_SECRET
            CLOUDFLARE_R2_URL
        env:
          BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const prComment = `
            üöÄ **Preview Deployed Successfully!**

            üìã **PR Preview**: \`maskmail-preview.effendi-official.workers.dev\`
            üåê **Live URL**: \`https://maskmail-preview.effendi-official.workers.dev\`

            üîß **Changes in this PR**:
            ‚Ä¢ Branch: \`${context.payload.pull_request.head.ref}\`
            ‚Ä¢ Commit: \`${context.sha.substring(0, 7)}\`
            ‚Ä¢ Author: @${context.actor}

            üìù **Notes**:
            ‚Ä¢ This preview deployment is automatically created from your PR
            ‚Ä¢ It may take a few minutes to fully propagate
            ‚Ä¢ Test all changes before merging to main

            ---
            ü§ñ Generated by [Cloudflare Workers Auto-Deploy](https://developers.cloudflare.com/workers/)
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: prComment
            });

  # Deploy to production (main branch)
  deploy-production:
    name: Deploy Production
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            node_modules/.cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('pnpm-lock.yaml') }}-${{ hashFiles('**/*.[jt]s', '**/*.[jt]sx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('pnpm-lock.yaml') }}-
            ${{ runner.os }}-nextjs-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Generate Cloudflare types
        run: pnpm run cf-typegen

      - name: Build application
        run: pnpm run build:cf
        env:
          BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

      - name: Generate backup filename
        id: backup
        run: |
          timestamp=$(date +%Y%m%d_%H%M%S)
          echo "filename=backup_prod_${timestamp}.sql" >> $GITHUB_OUTPUT

      - name: Backup production database
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: d1 export maskmail-db --output ${{ steps.backup.outputs.filename }}

      - name: Run database migrations (Production)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: d1 migrations apply maskmail-db

      - name: Deploy to Production
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          secrets: |
            BETTER_AUTH_SECRET
            GOOGLE_CLIENT_ID
            GOOGLE_CLIENT_SECRET
            CLOUDFLARE_R2_URL
        env:
          BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}

      - name: Wait for deployment
        run: sleep 10

      - name: Post-deployment verification
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: --version

      - name: Test deployment health
        run: |
          echo "Testing deployment health..."
          sleep 15
          curl -s https://maskmail.cc | grep -q "Next.js" && echo "‚úÖ Deployment health check passed" || echo "‚ö†Ô∏è Deployment health check failed"

  # Cleanup job
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-preview]
    if: always()
    steps:
      - name: Cleanup artifacts
        run: echo "Cleaning up temporary files and caches..."

  # Notify on deployment failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-preview]
    if: failure()
    steps:
      - name: Send failure notification
        run: |
          echo "üö® Deployment failed for ${GITHUB_REPOSITORY}"
          echo "Failed job: ${{ needs.deploy-production.result }} or ${{ needs.deploy-preview.result }}"
          echo "Check the logs for more details: ${{ github.server_url }}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
